// pages/api/telegram-webhook.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { createClient } from '@supabase/supabase-js';

export const config = { api: { bodyParser: true } };

type TGUpdate = {
  callback_query?: {
    id: string;
    from: { id: number; username?: string };
    message?: { chat: { id: number }; message_id: number };
    data?: string;
  };

  message?: any;
  edited_message?: any;
  pre_checkout_query?: {
    id: string;
    from: { id: number };
    currency: string;
    total_amount: number;
    invoice_payload: string;
  };
};

const ok = (res: NextApiResponse, body: any = { ok: true }) => res.status(200).json(body);
const runQuickly = <T,>(p: Promise<T>, ms = 800) =>
  Promise.race([p, new Promise<T | undefined>(r => setTimeout(() => r(undefined as any), ms))]);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // GET ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (req.method === 'GET') return ok(res, { ok: true });
  // –¢–µ–ª–µ–≥—Ä–∞–º —Ä–µ—Ç—Ä–∞–∏—Ç –ø—Ä–∏ –Ω–µ-200, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
  if (req.method !== 'POST') return ok(res);

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º—è–≥–∫–∏–π —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞ ‚Äî –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  const requiredSecret = process.env.TG_WEBHOOK_SECRET;
  const gotSecret = req.headers['x-telegram-bot-api-secret-token'] as string | undefined;
  if (requiredSecret && gotSecret !== requiredSecret) {
    console.warn('telegram-webhook: secret mismatch', { haveEnv: !!requiredSecret, gotHeader: !!gotSecret });
    // –Ω–µ return ‚Äî —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∞–ª–∏
  }

  // –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç ‚Äî –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª–Ω—è–µ–º ¬´–≤ —Ñ–æ–Ω–µ¬ª
  ok(res);

  const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN || '';
  const SUPABASE_URL = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL || '';
  const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_KEY || '';
  const LEDGER = process.env.TABLE_LEDGER || 'ledger';

  const update = (req.body || {}) as TGUpdate;
  const supabase =
    SUPABASE_URL && SUPABASE_SERVICE_KEY
      ? createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { persistSession: false } })
      : null;

  // -----------------[ INLINE-–ö–ù–û–ü–ö–ò –ê–î–ú–ò–ù–ê ]-----------------
  try {
    if (update?.callback_query?.data && supabase) {
      const cq = update.callback_query;
      const data = cq.data || '';
      // üëá –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ UUID, –∏ —á–∏—Å–ª–∞
      const m = data.match(/^(pay|rej):([A-Za-z0-9-]+)$/);

      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª —É –∫–Ω–æ–ø–∫–∏
      try {
        const resp = await fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ callback_query_id: cq.id, text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...' }),
        });
        console.log('CQ ack1', await resp.json().catch(() => ({})));
      } catch (e) {
        console.error('CQ ack1 fail', e);
      }

      if (!m) return;

      const [, action, idStr] = m;
      const reqId = idStr; // üëà –Ω–µ Number ‚Äî UUID —Å—Ç—Ä–æ–∫–∞

      // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å webhook-–æ—Ç–≤–µ—Ç
      (async () => {
        try {
          const { data: pr } = await supabase
            .from('payment_requests')
            .select('*')
            .eq('id', reqId)        // üëà —Å—Ç—Ä–æ–∫–æ–≤—ã–π id
            .maybeSingle();

          if (!pr) {
            await runQuickly(
              fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ callback_query_id: cq.id, text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }),
              }),
              800
            );
            return;
          }

          if (action === 'pay' && pr.status === 'pending') {
            const needStars = Math.round((pr.amount_rub || 0) * 2);

            // 1) –ø–æ–º–µ—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π
            await supabase
              .from('payment_requests')
              .update({
                status: 'paid',
                paid_amount_rub: pr.amount_rub,
                paid_at: new Date().toISOString(),
                admin_id: cq.from?.id ?? null,
              })
              .eq('id', reqId);

            // 2) –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å
            let debited = false;
            try {
              await supabase.rpc('debit_user_balance', {
                p_user_id: pr.user_id,              // UUID
                p_amount_rub: pr.amount_rub,
                p_amount_stars: needStars,
              });
              debited = true;
            } catch {
              debited = false;
            }
            if (!debited) {
              try {
                await supabase.from(LEDGER).insert([
                  {
                    tg_id: pr.tg_id,
                    type: 'sbp_payment',
                    asset_amount: -needStars,        // —Å–ø–∏—Å—ã–≤–∞–µ–º ‚≠ê
                    amount_rub: -(pr.amount_rub || 0),
                    rate_used: 0.5,
                    status: 'ok',
                    metadata: { payment_request_id: pr.id },
                  },
                ]);
              } catch {}
            }

            // 3) —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (TG_BOT_TOKEN && pr.tg_id) {
              await runQuickly(
                fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: pr.tg_id,
                    text: `–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n–°—É–º–º–∞: ${pr.amount_rub} ‚ÇΩ (${needStars} ‚≠ê)`,
                  }),
                }),
                800
              );
            }

            // 4) —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∞–¥–º–∏–Ω–∞
            if (cq.message?.message_id) {
              await runQuickly(
                fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/editMessageReplyMarkup`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: cq.message.chat.id,
                    message_id: cq.message.message_id,
                    reply_markup: { inline_keyboard: [] },
                  }),
                }),
                800
              );
            }

            // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ACK
            await runQuickly(
              fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ callback_query_id: cq.id, text: '‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ' }),
              }),
              800
            );
            return;
          }

          if (action === 'rej' && pr.status === 'pending') {
            await supabase
              .from('payment_requests')
              .update({ status: 'rejected', admin_id: cq.from?.id ?? null })
              .eq('id', reqId);

            if (cq.message?.message_id) {
              await runQuickly(
                fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/editMessageReplyMarkup`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: cq.message.chat.id,
                    message_id: cq.message.message_id,
                    reply_markup: { inline_keyboard: [] },
                  }),
                }),
                800
              );
            }

            await runQuickly(
              fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ callback_query_id: cq.id, text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ' }),
              }),
              800
            );
            return;
          }

          // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ / —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
          await runQuickly(
            fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ callback_query_id: cq.id, text: '–°—Å—ã–ª–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' }),
            }),
            800
          );
        } catch (e) {
          await runQuickly(
            fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerCallbackQuery`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ callback_query_id: cq.id, text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' }),
            }),
            800
          );
        }
      })();

      // –≤–µ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    }
  } catch (e) {
    console.error('callback_query error', e);
  }

  // -----------------[ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (–∫–∞–∫ –±—ã–ª–æ) ]-----------------
  try {
    // 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre_checkout_query
    if (update.pre_checkout_query && TG_BOT_TOKEN) {
      const pcq = update.pre_checkout_query;
      await runQuickly(
        fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/answerPreCheckoutQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pre_checkout_query_id: pcq.id, ok: true }),
        })
      );
    }

    // 2) –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ Stars
    const msg = update.message || update.edited_message;
    const sp = msg?.successful_payment;
    if (sp && supabase) {
      const fromId = Number(msg?.from?.id || 0);
      const currency = sp.currency;               // –æ–±—ã—á–Ω–æ 'XTR'
      const total = Number(sp.total_amount || 0); // –¥–ª—è Stars ‚Äî —ç—Ç–æ –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
      if (fromId && currency === 'XTR' && total > 0) {
        const stars = total;
        const amountRub = stars / 2; // –∫—É—Ä—Å 2‚≠ê = 1‚ÇΩ
        const rate = 0.5;

        // ledger ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã, balances_by_tg –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Å–∞–º
        await supabase.from(LEDGER).insert([{
          tg_id: fromId,
          type: 'stars_topup',
          asset_amount: stars,
          amount_rub: amountRub,
          rate_used: rate,
          status: 'ok',
          metadata: sp,
        }]);

        // —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        try {
          await supabase.from('webhook_logs').insert([{
            kind: 'successful_payment',
            tg_id: fromId,
            payload: sp
          }]);
        } catch {}

        // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        if (TG_BOT_TOKEN) {
          await runQuickly(
            fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: fromId,
                text: `‚≠ê –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: +${stars}‚≠ê. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`,
              }),
            })
          );
        }
      }
    }
  } catch (e: any) {
    console.error('webhook error:', e?.message || e);
    // –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
  }
}
