import type { NextApiRequest, NextApiResponse } from 'next'

const BOT_TOKEN = process.env.TG_BOT_TOKEN!
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID! // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫—É–¥–∞ —Å–ª–∞—Ç—å –∞–ª–µ—Ä—Ç—ã

const TG_API = (m: string) => `https://api.telegram.org/bot${BOT_TOKEN}/${m}`

const STARS_PER_RUB = 2  // 2‚≠ê = 1‚ÇΩ (–∫–∞–∫ –≤ UI)
const MIN_STARS = 2
const MAX_STARS = 1_000_000

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    if (req.method !== 'POST') return res.status(405).end()
    const { tg_id, amount_stars } = req.body ?? {}

    const uid = Number(tg_id)
    const stars = Number(amount_stars)

    if (!uid || Number.isNaN(uid)) {
      return res.status(400).json({ ok: false, error: 'BAD_TG_ID' })
    }
    if (!stars || Number.isNaN(stars) || stars < MIN_STARS || stars > MAX_STARS) {
      return res.status(400).json({ ok: false, error: 'BAD_AMOUNT' })
    }

    // 1) —Å–æ–∑–¥–∞—ë–º invoice link –≤ –±–æ—Ç–µ
    // –ü–†–ï–î–ü–û–ß–¢–ò–¢–ï–õ–¨–ù–û: createStarsInvoiceLink (–∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
    // –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∏–∑-–∑–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ @BotFather.
    const payload = new URLSearchParams({
      title: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Reel Wallet',
      description: '–û–ø–ª–∞—Ç–∞ –ó–≤—ë–∑–¥–∞–º–∏ Telegram',
      // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞:
      currency: 'XTR',        // –∑–≤—ë–∑–¥—ã
      prices: JSON.stringify([{ label: 'Reel Wallet', amount: stars }]),
      payload: JSON.stringify({ kind: 'topup_stars', tg_id: uid }),
      // –î–ª—è createStarsInvoiceLink –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å amount: stars (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω)
    })

    // –ü—Ä–æ–±—É–µ–º createStarsInvoiceLink, –µ—Å–ª–∏ –≤–µ—Ä–Ω—ë—Ç 404 ‚Äî –æ—Ç–∫–∞—Ç–∏–º—Å—è –Ω–∞ createInvoiceLink:
    let link = ''
    let r = await fetch(TG_API('createStarsInvoiceLink'), { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: payload })
    let j = await r.json()
    if (j?.ok && j?.result) {
      link = j.result  // —É–∂–µ –≤–∏–¥–∞ https://t.me/$slug
    } else {
      // fallback –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
      r = await fetch(TG_API('createInvoiceLink'), { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: payload })
      j = await r.json()
      if (j?.ok && j?.result) link = j.result
    }

    if (!link || !link.includes('https://t.me/$')) {
      console.error('invoice link failed', j)
      return res.status(500).json({ ok: false, error: 'INVOICE_FAILED' })
    }

    // 2) –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–æ–ø–∫—É
    const kb = {
      inline_keyboard: [[{ text: `–û–ø–ª–∞—Ç–∏—Ç—å ${stars}‚≠ê –≤ Telegram`, url: link }]]
    }
    await fetch(TG_API('sendMessage'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: uid,
        text: `–°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${stars} ‚≠ê\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram.`,
        reply_markup: kb
      })
    }).catch(() => {})

    // 3) –æ–ø–æ–≤–µ—Å—Ç–∏–º –∞–¥–º–∏–Ω–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if (ADMIN_CHAT_ID) {
      await fetch(TG_API('sendMessage'), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: ADMIN_CHAT_ID,
          text: `üßæ Stars invoice: ${stars}‚≠ê –¥–ª—è tg_id=${uid}\n${link}`
        })
      }).catch(() => {})
    }

    return res.status(200).json({ ok: true, invoice_link: link })
  } catch (e) {
    console.error('topup-stars fatal', e)
    return res.status(500).json({ ok: false, error: 'FATAL' })
  }
}
